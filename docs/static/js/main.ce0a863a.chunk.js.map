{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAuB5C,OACI,sBAAMC,SAfY,SAACC,GACnBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACnB,kCAAMA,EAAN,WCJHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAW,WACPxB,EAASC,GACRwB,MAAO,SAAAC,GAEJH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAACpB,IAKGqB,EDtB0BK,CAAc1B,GAAlCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAIrB,OACQ,qCACA,oBAAIJ,UAAU,wBAAd,SAAwChB,IACtCoB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACd,cAAC,EAAD,eAEQA,GADCA,EAAIC,aElBrBgB,EAAe,WAAO,IAAD,EAGMzC,mBAAS,CAAC,SAHhB,mBAGvB0C,EAHuB,KAGX3C,EAHW,KAM9B,OACI,gCACI,qCACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADJA,YCVpB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAEL,cAAC,EAAD,IAGFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.ce0a863a.chunk.js","sourcesContent":["import React, { useState } from 'react' \r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(''); //string vacio\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value);\r\n    }\r\n    \r\n\r\n     const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        //ValidaciÃ³n para usar setCategories\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats, ] );\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n        \r\n     }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=Ar0LfrfjvE3T7lAbRhUEnAKNvGpXeNqb`;\r\n    const respuesta = await fetch(url);\r\n    \r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}","import React from 'react' \r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\">\r\n            <img src={ url } alt={ title } />\r\n                <p> { title } </p>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react' \r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n    \r\n   \r\n    const { data:images, loading } = useFetchGifs( category ); \r\n\r\n    \r\n    \r\n    return (\r\n            <>\r\n            <h3 className=\"animate__bounceInLeft\">{ category }</h3>\r\n            { loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n           \r\n                {\r\n                    images.map( img  => (\r\n                     <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                     />\r\n                    ))\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then(  imgs => {\r\n             \r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n\r\n            \r\n        })\r\n\r\n    }, [category])\r\n\r\n\r\n    \r\n    \r\n    return state; // {data:[], loading: true};\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './Components/AddCategory'\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    \r\n    const [categories, setCategories] = useState(['Hola']);\r\n\r\n   \r\n    return (\r\n        <div>\r\n            <h2>Gif</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            \r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid \r\n                            key ={ category }\r\n                            category={ category } />\r\n                    \r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp'\nimport { AddCategory } from './Components/AddCategory'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n    \n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}